<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<link href="/stylesheets/bootstrap.min.css" rel="stylesheet"/>
<link href="/bower_components/bootstrap-toggle/css/bootstrap-toggle.min.css" rel="stylesheet"/>
<link rel="stylesheet" href="/stylesheets/numpad.css" />

<script src="/javascripts/jquery-1.11.2.min.js" type="text/javascript"></script>
<script src="/javascripts/js.cookie-2.1.1.min.js" type="text/javascript"></script>
<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-route/angular-route.min.js"></script>
<script src="/bower_components/angular-cookies/angular-cookies.js"></script>
<script src="/bower_components/angular-bootstrap/ui-bootstrap.min.js"></script>
<script src="/bower_components/ng-file-upload/ng-file-upload.min.js"></script>

<script src="/bower_components/bootstrap-toggle/js/bootstrap-toggle.min.js"></script>
<script src="/javascripts/numpad.js" type="text/javascript"></script>
<script type="text/javascript" src="/javascripts/navbar.js"></script>
<script src="/javascripts/date.format.js" type="text/javascript"></script>

<style type="text/css">
	body{
		padding: 90px 40px 40px 40px;
		font-family: devanagari, NotoSans, sans-serif;
	}
	@font-face {
	    font-family: devanagari;
	    src: url("/fonts/NotoSansDevanagariUI-Regular.ttf");
	}
	@font-face {
	    font-family: NotoSans;
	    src: url("/fonts/NotoSans-Regular.ttf");
	}
	@media only screen and (min-width:640px){
		body{
			font-size: 18px;
		}
	}
</style>
<script type="text/javascript">
function base64ArrayBuffer(arrayBuffer) {
	var base64 = ''
	var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

	var bytes = new Uint8Array(arrayBuffer)
	var byteLength = bytes.byteLength
	var byteRemainder = byteLength % 3
	var mainLength = byteLength - byteRemainder

	var a, b, c, d
	var chunk

	// Main loop deals with bytes in chunks of 3
	for (var i = 0; i < mainLength; i = i + 3) {
		// Combine the three bytes into a single integer
		chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]

		// Use bitmasks to extract 6-bit segments from the triplet
		a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18
		b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12
		c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6
		d = chunk & 63 // 63       = 2^6 - 1

		// Convert the raw binary segments to the appropriate ASCII encoding
		base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]
	}

	// Deal with the remaining bytes and padding
	if (byteRemainder == 1) {
		chunk = bytes[mainLength]

		a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2

		// Set the 4 least significant bits to zero
		b = (chunk & 3) << 4 // 3   = 2^2 - 1

		base64 += encodings[a] + encodings[b] + '=='
	} else if (byteRemainder == 2) {
		chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]

		a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10
		b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4

		// Set the 2 least significant bits to zero
		c = (chunk & 15) << 2 // 15    = 2^4 - 1

		base64 += encodings[a] + encodings[b] + encodings[c] + '='
	}

	return base64
}
</script>